Compiler Design Lab10
Intermediate representations and generating Intermediate representations

Name:- T.V.S.S.Sripad
Roll Number:- 18CS01008

To run the codes execute the following command:-
./run.sh x
where x = 1 for AST, x = 2 for 3 Address Code and x = 3  gives DAG


Note:-
1) For AST and DAG generations, after the IR is generated, the output is converted to dot language and 
    then a png image (called “ir.png”) representing the graph is also generated. 
2) Lexan1.l and parser1.y contain codes for AST generation.
3) Similarly lexan2.l, parser2,y contain code for 3address code and 
    lexan3.l, parser3.y contain codes for DAG generation. 
4) All outputs are written to output.txt file
5) The sample codes and intermediate representations generated by gcc are present in gcc-ir folder.
6) convertToDot.py file contains script for converting the outputs of parsers for AST, DAG generation
    into dot format so that the generated graph can be visualized in form of png.

Working of Run.sh file:-
1) The file takes question number as an argument and then runs the flex command first. (Ex: flex lexan1.l).
2) Then it runs the bison command with corresponding .y file.
3) Finally it compiles the parser.tab.c files and outputs .o file
4) Then .o file is ran with user input string and output is redirected to output.txt file.
5) Additionally if selected parser is that of AST or DAG, then the output from output.txt file is converted into 
    ir.dot file (conversion code is present in convertToDot.py file) and then ir.dot file is converted into png file
    for visualization.